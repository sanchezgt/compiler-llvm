	Sintaxis BNF de Umbra
<program> ::= <function_definition>+
<function_definition> ::= "func" <identifier> "(" <parameter_list> ")" "->" <type> "{" <statement>+ "}"
<parameter_list> ::= [<parameter> ("," <parameter>)*]
<parameter> ::= <type> <identifier>
<type> ::= "int" | "float" | "bool" | "char" | "string" | <type> "[]"


<statement> ::= <variable_declaration>
| <function_call>
| <conditional>
| <loop>
| <memory_management>
| <return_statement>
<variable_declaration> ::= <type> <identifier> ["=" <expression>]

<function_call> ::= <identifier> "(" [<argument_list>] ")"
<argument_list> ::= <expression> ("," <expression>)*

<conditional> ::= "if" <expression> "{" <statement>+ "}" ["else" "{" <statement>+ "}"]


<loop> ::= "repeat" <integer> "times" "{" <statement>+ "}"
| "repeat" "if" <expression> "{" <statement>+ "}"
<memory_management> ::= "new" <type> "[" <expression> "]"
| "delete" <identifier>
<return_statement> ::= "return" <expression>
<expression> ::= <identifier>
| <literal>
| <function_call>
| <unary_operation>
| <binary_operation>
| "(" <expression> ")"
<unary_operation> ::= ("ptr" | "ref" | "access") <identifier>
<binary_operation> ::= <expression> <operator> <expression>
<operator> ::= "+" | "-" | "*" | "/"
| "equal" | "different" | "and" | "or"
| ">" | "<" | ">=" | "<="
<identifier> ::= <letter> (<letter> | <digit>)*
<literal> ::= <integer_literal>
| <float_literal>
| <bool_literal>
| <char_literal>
| <string_literal>
<integer_literal> ::= <digit>+
<float_literal> ::= <digit>+ "." <digit>+
<bool_literal> ::= "true" | "false"
<char_literal> ::= "'" <any_char> "'"
<string_literal> ::= '"' <any_char>* '"'
<letter> ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<any_char> ::= <letter> | <digit> | <special_char>
